@using X.PagedList
@using X.PagedList.Mvc.Core
@using X.PagedList.Web.Common
@model IPagedList<Subject>

@{
    ViewBag.Title = "Subject | Index";
    var tutors = ViewBag.Tutors;
    string[] fields = { "Id", "Name", "Fees", "Tutor" };
}

<form>
    @Html.TextBox("name", null, new { autofocus = "" })
    @*(string)ViewBag.Sort*@
    @Html.Hidden("sort")
    @Html.Hidden("dir")
</form>

<p>
    @Model.Count() of @Model.TotalItemCount record(s) |
    Page @Model.PageNumber of  @Model.PageCount
</p>

<table class="table">
    <tr>
        @foreach (var f in fields)
        {
            string d = "asc";
            string c = "";

            if (f == ViewBag.Sort)
            {
                d = ViewBag.Dir == "des" ? "asc" : "des";
                c = ViewBag.Dir;
            }

            <th>
                <a href="?name=@ViewBag.Name&sort=@f&dir=@d" class="@c">@f</a>
            </th>
        }
        <th>Update</th>
        <th>Delete</th>
    </tr>
    @foreach (var s in Model)
    {
        var tutorName = tutors.ContainsKey(s.TutorId) ? tutors[s.TutorId] : "Unknown";
    <tr>
        <td>@s.Id</td>
        <td>@s.Name</td>
        <td>RM @s.Fees</td>
        <td>@tutorName</td>
        <td><button data-post="/Subject/Update/@s.Id">Update</button></td>
        <td><button data-post="/Subject/Delete/@s.Id">Delete</button></td>
    </tr>
    }
</table>

@{
    var options = PagedListRenderOptions.ClassicPlusFirstAndLast;
    options.LinkToFirstPageFormat = "First";
    options.LinkToLastPageFormat = "Last";
    options.LinkToPreviousPageFormat = "Previous";
    options.LinkToNextPageFormat = "Next";
}

@*p = pageNumber, string= page
    Everything must send to server or else server will forget the previous settings
*@
@Html.PagedListPager(
        Model,
        p => $"?name={ViewBag.Name}&sort={ViewBag.Sort}&dir={ViewBag.Dir}&page={p}",
        options)
