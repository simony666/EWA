@using X.PagedList;
@using X.PagedList.Mvc.Core;
@using X.PagedList.Web.Common;
@model IPagedList<Student>

@{
    var classes = ViewBag.ClassList;
    string[] fields = { "Id", "Name", "Gender", "Age", "Class Id" };
}

<form autocomplete="off"
      data-ajax="true"
      data-ajax-update="#target"
      data-ajax-loading="#loader"
      data-ajax-success="success">
    @Html.TextBox("name", null, new { autofocus = "", type = "search" })
    @Html.Hidden("sort")
    @Html.Hidden("dir")
    <img src="/images/loader.gif" id="loader" style="display: none">
</form>

<p>
    @Model.Count of @Model.TotalItemCount record(s) |
    Page @Model.PageNumber of @Model.PageCount
</p>

<table class="table">
    <tr>
        @foreach (var f in fields)
        {
            string d = "asc";
            string c = "";

            if (f == ViewBag.Sort)
            {
                d = ViewBag.Dir == "des" ? "asc" : "des";
                c = ViewBag.Dir;
            }

            <th>
                <a data-ajax="true"
                   data-ajax-update="#target"
                   data-ajax-loading="#loader"
                   data-ajax-success="success"
                   href="?name=@ViewBag.Name&sort=@f&dir=@d" class="@c">@f</a>
            </th>
        }
        <th>Assign Class</th>
        <th>View Timetable</th>
    </tr>

    @foreach (var s in Model)
    {
       // string className = s.ClassId != null && classes.ContainsKey(s.ClassId) ? classes[s.ClassId] : "Unassigned";

        <tr>
            <td>@s.Id</td>
            <td>@s.Name</td>
            <td>@s.Gender</td>
            <td>@s.Age</td>
            <td>@s.ClassId</td>
            <td>
                <button data-get="/Student/AssignClass/@s.Id">Assign Class</button>
            </td>
            <td>
                <button data-get="/Student/ViewTimetable/@s.Id">View Timetable</button>
            </td>
        </tr>
    }
</table>

@{
    var options = PagedListRenderOptions.ClassicPlusFirstAndLast;
    options.LinkToFirstPageFormat = "First";
    options.LinkToLastPageFormat = "Last";
    options.LinkToPreviousPageFormat = "Previous";
    options.LinkToNextPageFormat = "Next";

    var ajaxOptions = new AjaxOptions
            {
                HttpMethod = "get",
                UpdateTargetId = "target",
                LoadingElementId = "#loader",
                OnSuccess = "success"
            };
}

@Html.PagedListPager(
        Model,
        p => $"?name={ViewBag.Name}&sort={ViewBag.Sort}&dir={ViewBag.Dir}&page={p}",
        PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(options, ajaxOptions)
    )
